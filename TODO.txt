LEFT OFF:
- Create testing application - sepearate angular module
    - Add constructor error tests for all mos to check for ending with operators
        - I might need to add a special expression test for ending with an operator
        - Add tests for ending expression with incorrect signs. VALID:
            7*9--
            -6*****
            (8-)
            (-6*)
            (6--)
    - create an updating status for when http requests are still out
    - add some kind of popup for when http requests fail
    - make sure the tests are NOT updated in dev - ONLY LOCALLY
    - get the basic run tests/add/delete/update functionality working
    - create a component for displaying a single mathObject - for now, this can be really simple
        - eventually, I can use a changeContext object for additional input along with a flag that says it's the previous object or the new object
    - create a component for viewing a solution using the previous component
        - should this component also compare solutions? For when a test fails? Or should I have a different component for that?
- Decide on the structure of the main app data and load it
- Add new operations!
    - Try to find old app and see what order I did things in and what I'm missing
- maybe combine the multiplication/addition/subtraction/zero factors/zero terms operators in to one?
- Starting to get the feeling that I SHOULD force exponents and num/denoms to be expressions
- Create tests for new EMPTY_PARAMETER function errors - USE STASH
    - Maybe only check for this error in the Factory class since that's the only place it might show up? The rest will be caught through constructor inputs
    - Create another test to make sure there aren't EXTRA parameters or not ENOUGH parameters
- Do I want doubles to remove the leading 0 in cases like '0.5'?


GENERAL RULES:
================
- I am allowing ambiguous rational inputs like a/b/c but it will make assumptions without ()
- I am allowing inputs of (a)(b) - it will assume these are two factors
- I am allowing a^b/c => ((a^(b))/(c))
- I am allowing a^b*c => a^(b)*c

Devon
    12/30 - 798
    10/01 - 465.5
    07/01 - 323
    04/01 - 285

    12/30 - 104