LEFT OFF:
- clean up reduceChildren and constantAdditionSubtraction
- IMPORTANT!!! Look at current actions and helpers and create generic helpers for reducing, expanding/replacing, removing, and moving children
- Try to create a function that chains actions together (example - combining the expand negative with the removing () )
- In action tests, remove 'finalResult' and only use the steps property
- Starting to get the feeling that I SHOULD force exponents and num/denoms to be expressions
- Add constructor tests to rational around situations like 'a*b/c' => presumable ((a*b)/c)?
- Maybe rename removeParenthFromSingleTerm to basicRemoveParenth? Since this particuar case is ignoring num/denom/base/exponent/function cases?
- Test the operation functions
    - add tests that do not do anything
    - tests with multiple places that COULD be changed so that the order is tested
- For the removing () action - for NOW, it's very simple. It ignores base/exponent/num/denom/function content stuff - I'm wondering if those cases should be handled on a case by case
    basis in more complex simplifying actions
- Create testing application - sepearate angular module
- Add new operations!
    - Try to find old app and see what order I did things in and what I'm missing
- maybe combine the multiplication/addition/subtraction/zero factors/zero terms operators in to one?
- inside services, create a 'Core' services and move the factory/error-handler/string formatter in to it
- Create tests for new EMPTY_PARAMETER function errors - USE STASH
    - Maybe only check for this error in the Factory class since that's the only place it might show up? The rest will be caught through constructor inputs
    - Create another test to make sure there aren't EXTRA parameters or not ENOUGH parameters
- Do I want doubles to remove the leading 0 in cases like '0.5'?


GENERAL RULES:
================
- I am allowing ambiguous rational inputs like a/b/c but it will make assumptions without ()
- I am allowing inputs of (a)(b) - it will assume these are two factors
- I am allowing a^b/c => ((a^(b))/(c))
- I am allowing a^b*c => a^(b)*c

Devon
    12/30 - 798
    10/01 - 465.5
    07/01 - 323
    04/01 - 285

    12/30 - 104